var log = require("log");
log.setLevel("INFO");
var devices = require("device");
var config = require ("identity/config/config");
var queryDocsPerPage = config.queryDocsPerPage;
var buildCsvSciptPath = config.buildCsvSciptPath;

function getDevices(params){
    log.info("getDevices params: " + JSON.stringify(params));

    var fields = "*";
    if(params["fields"] !== undefined && params["fields"] !== null ) {
        fields = params["fields"];
    }

    var count = true;
    if(params["count"] !== undefined && params["count"] !== null) {
        count = (params["count"] === "true") ?  true : false;
    }

    var queryFilter = "";
    if(params["queryFilter"] !== undefined && params["queryFilter"] !== null) {
        queryFilter = params["queryFilter"];
    }

    var documents = [];
    var pageNumber = 1;
    var continueLoop = true;
    while(continueLoop){
        var queryObj = { "fields": fields, "sort":"name<string:DESC>", "count": count,"query":'id !="scriptr"', "includeFieldType" : true};
        if(queryFilter!="")
            queryObj.query = 'id like "' + queryFilter + '%" or name like "' + queryFilter + '%"';
        queryObj.pageNumber = pageNumber;
        var response = devices.query(queryObj);
        if(response.metadata.status == "failure") {
            return response.metadata;
        }
        if(response.result.devices.length < queryDocsPerPage){
            continueLoop = false;
        } else {
            pageNumber++;
        }
        if(response.result.devices.length > 0)
            documents = documents.concat(response.result.devices);
    }
    log.info("getDevices documents: " + documents);
    return documents;
}

function getGroups(params){
    var groups = require("group");
    var users =[];
    var results = [];
    var groups = groups.list();
    var result = groups.result.groups;

    var count = true;
    if(params["count"] !== undefined && params["count"] !== null) {
        count = (params["count"] === "true") ?  true : false;
    }

    var queryFilter = "";
    if(params["queryFilter"] !== undefined && params["queryFilter"] !== null) {
        queryFilter = params["queryFilter"];
    }

    if(result!= null && result.length >0){
        if(count){
            for (var i=0; i<result.length;i++){
                var name = result[i].name;
                if(queryFilter!="" && !name.includes(queryFilter)){
                    continue;
                }
                var response = devices.query({"query":'groups = "' +name+ '"', "count": count});
                response.result["name"] = name;
                users.push(response.result);
            }
            if(response.metadata.status == "failure") {
                return response.metadata;
            } else{
                var originalCount = users.length;
                if(users!=null && users.length>0 && params.pageNumber != null && params.pageNumber!="" && params.endRow!= null && params.startRow!= null){
                    var startRow = parseInt(params.startRow);
                    var endRow = parseInt(params.endRow);
                    var pageDocuments = [];
                    var x=0;
                    for(i=startRow; i<endRow; i++){
                        if(users[i]!=null && users[i]!="")
                            pageDocuments[x++] = users[i];
                    }
                    users = pageDocuments;
                    log.info("pageDocuments: "+JSON.stringify(pageDocuments));
                    log.info("users: "+JSON.stringify(users));
                }
                return { "count": originalCount, "documents": users};
            }
        }
        else{
            return  result;
        }
    }
}

function importDevices(devicesArr){
    //loop on all devices, save them one by one
    //after successful save, generate token
    //if one fails, rollback everything and return failure

    var ts = apsdb.beginTransaction();
    try{
        var responseObj = {};
        devicesArr.forEach(function(params) {
            if(params.id != null && params.id != ""){
                var deviceAttrs = params.deviceAttrs;
                if(deviceAttrs != null && !(deviceAttrs.filter(function(el) {
                    return Object.keys(el).length !== 0;
                }).length === 0)){
                    var jsonObj = {};
                    params['meta.types'] = {};
                    if(deviceAttrs !=null && deviceAttrs.length > 0){
                        for(var i=0; i<deviceAttrs.length; i++){
                            if(deviceAttrs[i] != null && Object.keys(deviceAttrs[i]).length > 0){
                                var name = deviceAttrs[i].name;
                                var value = deviceAttrs[i].value;
                                var type = deviceAttrs[i].type;
                                jsonObj[name]= type;
                                params[name] = value;
                            }
                        }
                        params['meta.types'] = jsonObj;
                        if(params.description != null && params.description != "")
                            params['meta.types'].description = "text";
                    }
                }
                delete params['deviceAttrs'];
                params["password"] = Math.random().toString(36).substring(7);
                var response = devices.create(params);
                if(response.metadata.status == "failure") {
                    log.error("Creating device failed: " + JSON.stringify(response.metadata));
                    responseObj = response.metadata;
                    throw {
                        errorCode: response.metadata.errorCode,
                        errorDetail: response.metadata.errorDetail
                    };
                } else {
                    responseObj = {"status": "success"};
                    //generate token after successfull device creation
                    //var tokenResponse = devices.generateToken(response.result.device.id);
                    /*
                        var tokenResponse = apsdb.callApi("GenerateToken", {"apsws.id": response.result.device.id}, null);
                        if(tokenResponse.metadata.status == "failure") {
                            log.error("Generating token failed: " + JSON.stringify(tokenResponse.metadata));
                            responseObj = tokenResponse.metadata;
                            throw {
                                errorCode: tokenResponse.metadata.errorCode,
                                errorDetail: tokenResponse.metadata.errorDetail
                            };
                        } else {
                            responseObj = {"status": "success"};
                        }
                        */
                }
            }
        });
        ts.commit();
    } catch(e){
        ts.rollback();
        log.error("Failure when importing devices\n" + typeof(e) == "string" ? e : JSON.stringify(e));
    }

    return responseObj;
}

function deleteDevices(deviceArr){
    var ts = apsdb.beginTransaction();
    try{
        var responseObj = {};
        deviceArr.forEach(function(deviceId) {
            var response = devices.delete(deviceId);
            if(response.metadata.status == "failure") {
                responseObj = response.metadata;
                throw {
                    errorCode: response.metadata.errorCode,
                    errorDetail: response.metadata.errorDetail
                };
            } else {
                responseObj = {"status": "success"};
            }
        })

        ts.commit();
    } catch(e){
        ts.rollback();
        log.error("Failure when deleting devices\n" + typeof(e) == "string" ? e : JSON.stringify(e));
    }      

    return responseObj;
}

function deleteGroups(groupArr){
    var groups = require("group");
    var ts = apsdb.beginTransaction();
    try{
        var responseObj = {};
        groupArr.forEach(function(groupName) {
            var response = groups.delete(groupName);
            if(response.metadata.status == "failure") {
                responseObj = response.metadata;
                throw {
                    errorCode: response.metadata.errorCode,
                    errorDetail: response.metadata.errorDetail
                };
            } else {
                responseObj = {"status": "success"};
            }
        })

        ts.commit();
    } catch(e){
        ts.rollback();
        log.error("Failure when deleting groups\n" + typeof(e) == "string" ? e : JSON.stringify(e));
    }      

    return responseObj;
}

function getJobStatus(params, paramsEvaluator, errorHandler){
    var requiredParams = ["scriptHandleId"];
    paramsEvaluator = new paramsEvaluator.ParamsEvaluator();
    var hasAllRequiredParams = paramsEvaluator.hasRequiredParams(params, requiredParams)
    if(!hasAllRequiredParams.success) {
        return errorHandler.buildError("missing_parameter", "Parameter \""+hasAllRequiredParams.param+ "\" is required.");
    }
    var getJobStatusParams = {
        "apsdb.handle": params.scriptHandleId
    };
    var result = apsdb.callApi("GetJobStatus", getJobStatusParams, null);
    log.info("the result is"+JSON.stringify(result));
    if (result.status == "failure") {
        var errorMsg = "An error occurred while fetching job status [" + JSON.stringify(result) + "]";
        return { "status": "failure", "errorDetail": errorMsg };
    } else {
        return result.result;
    }
}