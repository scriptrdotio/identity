var log = require("log");
log.setLevel("INFO");
var devices = require("device");
var groups = require("group");
var users = require("user");
var config = require ("../config/properties");
var queryDocsPerPage = config.queryDocsPerPage;
var buildCsvSciptPath = config.buildCsvSciptPath;
var config = require("../config/properties");

if(config.cacheManager) {
    var cacheManager = require(config.cacheManager);
} else {
    var cacheManager = require("../entities/cacheManager");
}

//list all devices with their locations, plans and zones, it gets the values from the cache
function listCachedDevices(){
    //Cache implementation should be added here
    return cacheManager.get();
}

function getDevices(params){
    log.info("getDevices params: " + JSON.stringify(params));

    var fields = "*";
    if(params["fields"] !== undefined && params["fields"] !== null ) {
        fields = params["fields"];
    }

    var count = true;
    if(params["count"] !== undefined && params["count"] !== null) {
        count = (params["count"] === "true") ?  true : false;
    }

    var queryFilter = "";
    if(params["queryFilter"] !== undefined && params["queryFilter"] !== null) {
        queryFilter = params["queryFilter"];
    }

    var documents = [];
    var pageNumber = 1;
    var continueLoop = true;
    while(continueLoop){
        var queryObj = { "fields": fields, "sort":"name<string:DESC>", "count": count,"query":'id !="scriptr"', "includeFieldType" : true};
        if(queryFilter!="")
            queryObj.query = 'id <CI> like "' + queryFilter + '%" or name <CI> like "' + queryFilter + '%"';
        queryObj.pageNumber = pageNumber;
        log.info("queryObj"+JSON.stringify(queryObj))
        var response = devices.query(queryObj);
        if(response.metadata.status == "failure") {
            return response.metadata;
        }
        if(response.result.devices.length < queryDocsPerPage){
            continueLoop = false;
        } else {
            pageNumber++;
        }
        if(response.result.devices.length > 0)
            documents = documents.concat(response.result.devices);
    }
    log.info("getDevices documents: " + documents);
    return documents;
}

function getUsers(params){
    log.info("getUsers params: " + JSON.stringify(params));

    var fields = "*";
    if(params["fields"] !== undefined && params["fields"] !== null ) {
        fields = params["fields"];
    }


    var queryFilter = "";
    if(params["queryFilter"] !== undefined && params["queryFilter"] !== null) {
        queryFilter = params["queryFilter"];
    }

    var documents = [];
    var pageNumber = 1;
    var continueLoop = true;
    while(continueLoop){
        var queryObj = { "fields": fields, "sort":"name<string:DESC>", "includeFieldType" : true};
        if(queryFilter!="")
            queryObj.query = 'id <CI> like "' + queryFilter + '%" or name <CI> like "' + queryFilter + '%" or email like "' + queryFilter + '%"';
        queryObj.pageNumber = pageNumber;
        var response = users.query(queryObj);
        if(response.metadata.status == "failure") {
            return response.metadata;
        }
        if(response.result.users.length < queryDocsPerPage){
            continueLoop = false;
        } else {
            pageNumber++;
        }
        if(response.result.users.length > 0)
            documents = documents.concat(response.result.users);
    }
    log.info("getUsers documents: " + documents);
    return documents;
}


function getGroups(params){
    var groups = require("group");
    var users =[];
    var results = [];
    var groups = groups.list();
    var result = groups.result.groups;


    var count = true;
    if(params["count"] !== undefined && params["count"] !== null) {
        count = (params["count"] === "true") ?  true : false;
    }

    var queryFilter = "";
    if(params["queryFilter"] !== undefined && params["queryFilter"] !== null) {
        queryFilter = params["queryFilter"];
    }
    if(result!= null && result.length >0){
        if(count){
            for (var i=0; i<result.length;i++){
                var name = result[i].name;
                if(queryFilter!=""){
                    var lowerCaseName = name.toLowerCase();
                    var lowerCaseFilter = queryFilter.toLowerCase();
                    if(!lowerCaseName.includes(lowerCaseFilter))
                        continue;
                }
                var response = devices.query({"query":'groups = "' +name+ '"', "count": count});
                if(response.metadata.status == "failure") 
                    return response.metadata;
                response.result["name"] = name;
                users.push(response.result);
            }
            var originalCount = users.length;
            if(users!=null && users.length>0 && params.pageNumber != null && params.pageNumber!="" && params.endRow!= null && params.startRow!= null){
                var startRow = parseInt(params.startRow);
                var endRow = parseInt(params.endRow);
                var pageDocuments = [];
                var x=0;
                for(i=startRow; i<endRow; i++){
                    if(users[i]!=null && users[i]!="")
                        pageDocuments[x++] = users[i];
                }
                users = pageDocuments;
                log.info("pageDocuments: "+JSON.stringify(pageDocuments));
                log.info("users: "+JSON.stringify(users));
            }
            return { "count": originalCount, "documents": users};
        }
        else{
            return  result;
        }
    }
}

function importIdentity(identityParams){
    var identityArr = identityParams.identityArr;
    var gridType = identityParams.gridType;
    //var ts = apsdb.beginTransaction();
    try{
        var responseObj = {"status": "success"};
        var succeeded = [];
        var failed = [];
        var skipped = [];
        identityArr.forEach(function(params) {
            if(params.id != null && params.id != ""){
                var identityAttrs = params.identityAttrs;
                if(identityAttrs != null && !(identityAttrs.filter(function(el) {
                    return Object.keys(el).length !== 0;
                }).length === 0)){
                    var jsonObj = {};
                    params['meta.types'] = {};
                    if(identityAttrs !=null && identityAttrs.length > 0){
                        for(var i=0; i<identityAttrs.length; i++){
                            if(identityAttrs[i] != null && Object.keys(identityAttrs[i]).length > 0){
                                var name = identityAttrs[i].name;
                                var value = identityAttrs[i].value;
                                var type = identityAttrs[i].type;
                                jsonObj[name]= type;
                                params[name] = value;
                            }
                        }
                        params['meta.types'] = jsonObj;
                    }
                }
                if(gridType == "device"){
                    if(params.description != null && params.description != ""){
                        if(!params['meta.types'])
                            params['meta.types'] = {};
                        params['meta.types'].description = "text";
                    }
                }
                delete params['identityAttrs'];
                params["password"] = Math.random().toString(36).substring(7);
                var response;
                log.info("Creating identity with params: " + JSON.stringify(params));
                if(gridType == "device")
                    response = devices.create(params);
                else if(gridType == "user")
                    response = users.create(params);
                if(response.metadata.status == "failure") {
                    log.error("Identity creation failure: " + JSON.stringify(response.metadata));
                    //check if the failure was due to duplicate
                    if(response.metadata.errorCode && (response.metadata.errorCode == "DUPLICATE_DEVICE" || response.metadata.errorCode == "DUPLICATE_USER")){
                        log.info("Duplicate " + gridType);
                        skipped.push(params.id);
                    }else{
                        failed.push(params.id);
                    }
                }else{
                    log.info("Identity creation success: " + JSON.stringify(response));
                    succeeded.push(params.id);
                }
                if(gridType == "device" && response.metadata.status == "success") {
                    //generate token after successfull device creation AND if device is not suspended
                    if(params.isSuspended == "false"){
                        var tokenResponse = devices.generateToken(response.result.device.id);
                        log.info("Generating token response: " + JSON.stringify(tokenResponse));
                        //  var tokenResponse = apsdb.callApi("identity/api/devices/scripts/generateTokens", response.result.device.id, null);
                        if(tokenResponse.metadata.status == "failure") {
                            log.error("Generating token failed for device: " + response.result.device.id);
                        }
                    }
                }
            }
        });
        
        var succeededCount = succeeded.length;
        var failedCount = failed.length;
        var skippedCount = skipped.length;
        
        if(failedCount > 0){
            responseObj["status"] = "failure";
            responseObj["failedReport"] = failed;
            responseObj["message"] = "Import failed for ["+failedCount+"] "+gridType+"(s).";
            if(skippedCount > 0){
                responseObj["skippedReport"] = skipped;
                responseObj["message"] = "Import skipped for duplicated ["+skippedCount+"] "+gridType+"(s) and failed for ["+failedCount+"] "+gridType+"(s).";
            }
            if(succeededCount > 0){
                responseObj["succeededReport"] = succeeded;
                responseObj["message"] = "Import succeeded for ["+succeededCount+"] "+gridType+"(s), skipped for duplicated ["+skippedCount+"] "+gridType+"(s) and failed for ["+failedCount+"] "+gridType+"(s).";
            }
        }else if(skippedCount > 0){
            responseObj["status"] = "partial";
            responseObj["skippedReport"] = skipped;
            responseObj["message"] = "Import skipped for duplicated ["+skippedCount+"] "+gridType+"(s).";
            if(succeededCount > 0){
                responseObj["succeededReport"] = succeeded;
                responseObj["message"] = "Import succeeded for ["+succeededCount+"] "+gridType+"(s) and skipped for duplicated ["+skippedCount+"] "+gridType+"(s).";
            }
        }else if(succeededCount > 0){
            responseObj["status"] = "success";
            responseObj["message"] = "Import succeeded for ["+succeededCount+"] "+gridType+"(s).";
        }
        
        cacheManager.invalidate();
        //ts.commit();
    } catch(e){
        //ts.rollback();
        log.error("Failure when importing identity\n" + typeof(e) == "string" ? e : JSON.stringify(e));
    }

    return responseObj;
}

function deleteDevices(deviceArr){
    var ts = apsdb.beginTransaction();
    try{
        var responseObj = {};
        deviceArr.forEach(function(deviceId) {
            var response = devices.delete(deviceId);
            if(response.metadata.status == "failure") {
                responseObj = response.metadata;
                throw {
                    errorCode: response.metadata.errorCode,
                    errorDetail: response.metadata.errorDetail
                };
            } else {
                responseObj = {"status": "success"};
            }
        })

        cacheManager.invalidate();
        ts.commit();
    } catch(e){
        ts.rollback();
        log.error("Failure when deleting devices\n" + typeof(e) == "string" ? e : JSON.stringify(e));
    }      

    return responseObj;
}

function deleteIdentity(identityArr, module){
    var groups = require("group");
    var arrLength = identityArr.length;
    if(arrLength==1)
        var ts = apsdb.beginTransaction();
    try{
        var responseObj = {"status": "success"};
        var succeeded = [];
        var failed = [];
        identityArr.forEach(function(identityId) {
            var response;
            if(module == "group")
                response = groups.delete(identityId);
            else if(module == "device")
                response = devices.delete(identityId);
            else if(module == "user")
                response = users.delete(identityId);
            if(response.metadata.status == "failure") {
                if(arrLength>1)
                    failed.push(identityId);
                else{
                    responseObj = response.metadata;
                    throw {
                        errorCode: response.metadata.errorCode,
                        errorDetail: response.metadata.errorDetail
                    };
                }
            } else {
                if(arrLength>1)
                    succeeded.push(identityId);
            }
        })
        
        var succeededCount = succeeded.length;
        var failedCount = failed.length;
        
        if(failedCount > 0){
            responseObj["status"] = "failure";
            responseObj["message"] = "Deletion succeeded for ["+succeededCount+"] "+module+"(s) and failed for ["+failedCount+"] "+module+"(s).";
            responseObj["failedReport"] = failed;
            if(succeededCount > 0){
                responseObj["succeededReport"] = succeeded;
            }
        }else if(succeededCount > 0){
            responseObj["status"] = "success";
            responseObj["message"] = "Deletion succeeded for ["+succeededCount+"] "+module+"(s).";
        }

        cacheManager.invalidate();
        if(arrLength==1)
            ts.commit();
    } catch(e){
        if(arrLength==1)
            ts.rollback();
        log.error("Failure when deleting "+module+"\n" + typeof(e) == "string" ? e : JSON.stringify(e));
    }      

    return responseObj;
}

function getJobStatus(params, paramsEvaluator, errorHandler){
    var requiredParams = ["scriptHandleId"];
    log.info("Params"+ JSON.stringify(params));
    paramsEvaluator = new paramsEvaluator.ParamsEvaluator();
    var hasAllRequiredParams = paramsEvaluator.hasRequiredParams(params, requiredParams)
    if(!hasAllRequiredParams.success) {
        return errorHandler.buildError("missing_parameter", "Parameter \""+hasAllRequiredParams.param+ "\" is required.");
    }
    var getJobStatusParams = {
        "apsdb.handle": params.scriptHandleId
    };
    var result = apsdb.callApi("GetJobStatus", getJobStatusParams, null);
    log.info("the result is"+JSON.stringify(result));
    if (result.status == "failure") {
        var errorMsg = "An error occurred while fetching job status [" + JSON.stringify(result) + "]";
        return { "status": "failure", "errorDetail": errorMsg };
    } else {
        return result.result;
    }
}


function generateToken(params){
    var deviceIdParam = params["id"];
    var action = "";
    if(params["action"] !== undefined && params["action"] !== null ) {
        action = params["action"];
    }
    var deviceArr = [];
    if(deviceIdParam instanceof Array){
        deviceArr = deviceIdParam;
    }else{
        deviceArr = [deviceIdParam];
    }

    var ts = apsdb.beginTransaction();
    try{
        var responseObj = {};
        deviceArr.forEach(function(deviceId) {
            /*
            * if action is not empty then we have a single device id coming from viewDevice (so we know its either generate or regenerate)
            * if action is empty it means its coming from refreshTokens and we do not know if this device id already has a token or not
            * so first the regenerate is called, if it failed with a code of TOKEN_NOT_FOUND then this device has no token 
            * and we move on to generate one
            */
            var regenerate = true;
            if(action != "" && action != "regenerate"){
                log.info("action is not regenerate");
                regenerate = false;
            }
            if(regenerate){
                log.info("action is regenerate");
                var response = devices.regenerateToken(deviceId);
                log.info("regenerateResponse"+ JSON.stringify(response))
                if(response.metadata.status == "failure") {
                    responseObj = response.metadata;
                    //if action is empty and the error was not TOKEN_NOT_FOUND, then something else happened and an error should be thrown
                    if(action != "" || (action == "" && responseObj.errorCode != "TOKEN_NOT_FOUND")){
                        throw {
                            errorCode: response.metadata.errorCode,
                            errorDetail: response.metadata.errorDetail
                        };
                    }
                } else {
                    if(action != "")
                        responseObj = response.result;                   
                    else
                        responseObj = {"status": "success"};
                    //if regenerate succeeds no need to continue to generate
                    return;
                }
            }
            var response = devices.generateToken(deviceId);
            if(response.metadata.status == "failure") {
                responseObj = response.metadata;
                throw {
                    errorCode: response.metadata.errorCode,
                    errorDetail: response.metadata.errorDetail
                };
            } else {
                if(action != "")
                    responseObj = response.result;                   
                else
                    responseObj = {"status": "success"};
            }
        })
        ts.commit();
    } catch(e){
        ts.rollback();
        log.error("Failure when generating token\n" + typeof(e) == "string" ? e : JSON.stringify(e));
    }      

    return responseObj;
}

function parseCSV(str) {
    var arr = [];
    var quote = false;
    for (var row = col = c = 0; c < str.length; c++) {
        var cc = str[c], nc = str[c+1];
        arr[row] = arr[row] || [];
        arr[row][col] = arr[row][col] || '';

        if (cc == '"' && quote && nc == '"') { arr[row][col] += cc; ++c; continue; }
        if (cc == '"') { quote = !quote; continue; }
        if (cc == ',' && !quote) { ++col; continue; }
        if (cc == '\n' && !quote) { ++row; col = 0; continue; }

        arr[row][col] += cc;
    }
    return arr;
}