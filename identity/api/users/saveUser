var _ = require("../../modules/underscore/underscore.js")._;
var paramsEvaluator = require("../../entities/ParamsEvaluator");
var errorHandler = require("../../entities/ErrorHandler");
var errorHandler = new errorHandler.ErrorHandler();
var users = require("user");
var log = require("log")
log.setLevel("INFO");
var config = require ("../../config/config");
var aclEvaluator = require("../../entities/AclEvaluator");
//Check permissions
var identityManagementGroups = config.identityManagementGroups;
//Check if user has rights to access this api
var aclEvaluator = new aclEvaluator.AclEvaluator();
//user needs to be in the identityManagementGroups
var hasPermission = aclEvaluator.hasPermissions(request.user, identityManagementGroups);
if(!hasPermission) {
  return errorHandler.buildError("no_permission", "You do not have enough permissions to manage users.");
}

var requiredParams = ["id", "name"];
var optionalParams = ["update", "email", "groups", "password", "isSuspended", "userAttrs", "_oldUserAttrs"];

//Check if required params
var paramsEvaluator = new paramsEvaluator.ParamsEvaluator();
hasAllRequiredParams = paramsEvaluator.hasRequiredParams(request.body, requiredParams)
if(!hasAllRequiredParams.success) {
    return errorHandler.buildError("missing_parameter", "Parameter \""+hasAllRequiredParams.param+ "\" is required.");
}

var params = paramsEvaluator.buildParams(request.body, requiredParams, optionalParams);

var update = false;
if(params["update"] !== undefined && params["update"] !== null )
    update = params["update"];
//remove update from params so it does not get saved as a device attribute
delete params['update'];

var oldUserAttrs = params._oldUserAttrs;
var userAttrs = params.userAttrs;
//if a user added empty device attributes rows and saved. We would have empty objects in an empty array. The following validation is to avoid looping multiple times on empty objects 
if(userAttrs != null && !(userAttrs.filter(function(el) {
    return Object.keys(el).length !== 0;
}).length === 0)){
    var jsonObj = {};
    params['meta.types'] = {};
    if(userAttrs !=null && userAttrs.length > 0){
        for(var i=0; i<userAttrs.length; i++){
            if(userAttrs[i] != null && Object.keys(userAttrs[i]).length > 0){
                var name = userAttrs[i].name;
                var value = userAttrs[i].value;
                var type = userAttrs[i].type;
                jsonObj[name]= type;
                params[name] = value;
            }
        }
        params['meta.types'] = jsonObj;
        
    }
}
delete params['userAttrs'];
delete params['_oldUserAttrs'];
delete confirmPassword;
log.info("Request normalized params: " + JSON.stringify(params));

var response;
if(update){
    //check if any attribute was removed
    var newUserAttrs = _.pluck(userAttrs, "name");
    var removedAttrs = _.difference(oldUserAttrs, newUserAttrs);
    if(removedAttrs && removedAttrs.length > 0){
        removedAttrs.forEach(function(removedAttr) {
            params[removedAttr] = "";
        })
    }
    response = users.save(params);
}else
    response = users.create(params);

log.info("response"+JSON.stringify(response));
if(response.metadata.status == "failure") {
    return response.metadata;
} else {
    return response.metadata;
}
