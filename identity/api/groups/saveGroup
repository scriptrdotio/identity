var _ = require("/modules/underscore/underscore.js")._;
var paramsEvaluator = require("../../entities/ParamsEvaluator");
var errorHandler = require("../../entities/ErrorHandler");
var groups = require("group");
var errorHandler = new errorHandler.ErrorHandler();
var config = require ("identity/config/config");
var log = require("log")
log.setLevel("INFO");
var body = request.body ? request.body : ((request.rawBody) ? request.rawBody : request.parameters);
var requestParams = typeof(body) == "string" ? JSON.parse(body) : body;
log.info("Request params: " + JSON.stringify(requestParams));
switch (request.method) {
    case "GET":
        // if the request method is GET, it means we are checking on jobHandleId
        var identityManager = require("identity/entities/identityManager");
        return identityManager.getJobStatus(requestParams, paramsEvaluator, errorHandler);
        break;
    case "POST":
        var requiredParams = ["name"];
        var optionalParams = ["update", "newName", "devices", "originalDevices", "updateDevices"];
        //Check if required params
        var paramsEvaluator = new paramsEvaluator.ParamsEvaluator();
        hasAllRequiredParams = paramsEvaluator.hasRequiredParams(requestParams, requiredParams)
        if(!hasAllRequiredParams.success) {
            return errorHandler.buildError("missing_parameter", "Parameter \""+hasAllRequiredParams.param+ "\" is required.");
        }

        var params = paramsEvaluator.buildParams(requestParams, requiredParams, optionalParams);
        var updateDevices = true;
        if(params["updateDevices"] != null && params["updateDevices"] !== undefined){
            updateDevices = params["updateDevices"];
        }

        var groupName = params["name"];
        var groupResponse = null;
        if(!params["update"])
            groupResponse = groups.create(groupName);
        else {
            if(params["newName"] != null && params["newName"] != ""){
                groupResponse = groups.rename(groupName, params["newName"]);
                groupName = params["newName"];
            }
        }

        var response = {};
        if(groupResponse != null && groupResponse.metadata.status == "failure") {
            updateDevices = false;
            response = groupResponse.metadata;
        } else {
            response =  {"status": "success"};
        }

        if(updateDevices){
            //Updating devices using a long running job. It reports failed devices if any.
            var originalDevices = params["originalDevices"];
            var devices = params["devices"];
            if(devices != null && devices != ""){
                var data = {
                    "apsdb.scriptName": config.updateDevicesGroups,
                    "originalDevices": JSON.stringify(originalDevices),
                    "devices": JSON.stringify(devices),
                    "groupName": groupName
                };
                var result = apsdb.callApi("QueueScript", data, null);

                if (result.status == "failure") {
                    var errorMsg = "[saveGroup] An error occurred while queueing job [" + JSON.stringify(result) + "]";
                    response = {"status": "failure", "errorDetail": errorMsg};
                } else {
                    response = {"status":"success", "scriptHandleId": result.result.script.scriptHandle};
                }
            }
        }

        return response;
        break;
    default:
        return errorHandler.buildError("invalid_method", "Invalid HTTP method"); 
}