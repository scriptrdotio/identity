var paramsEvaluator = require("../../entities/ParamsEvaluator");
var errorHandler = require("../../entities/ErrorHandler");
var errorHandler = new errorHandler.ErrorHandler();
var devices= require("device");
var log = require("log")
log.setLevel("INFO");

var requiredParams = ["id", "name"];
var optionalParams = ["update", "description", "groups", "password", "isSuspended", "deviceAttrs"];

//Check if required params
var paramsEvaluator = new paramsEvaluator.ParamsEvaluator();
hasAllRequiredParams = paramsEvaluator.hasRequiredParams(request.body, requiredParams)
if(!hasAllRequiredParams.success) {
    return errorHandler.buildError("missing_parameter", "Parameter \""+hasAllRequiredParams.param+ "\" is required.");
}

log.info(JSON.stringify(request.body))
var params = paramsEvaluator.buildParams(request.body, requiredParams, optionalParams);

var update = false;
if(params["update"] !== undefined && params["update"] !== null )
    update = params["update"];

log.info(JSON.stringify(params));

var deviceAttrs = params.deviceAttrs;
//if a user added empty device attributes rows and saved. We would have empty objects in an empty array. The following validation is to avoid looping multiple times on empty objects 
if(deviceAttrs != null && !(deviceAttrs.filter(function(el) {
    return Object.keys(el).length !== 0;
}).length === 0)){
    var jsonObj = {};
    params['meta.types'] = {};
    if(deviceAttrs !=null && deviceAttrs.length > 0){
        for(var i=0; i<deviceAttrs.length; i++){
            if(deviceAttrs[i] != null && Object.keys(deviceAttrs[i]).length > 0){
                var name = deviceAttrs[i].name;
                var value = deviceAttrs[i].value;
                var type = deviceAttrs[i].type;
                jsonObj[name]= type;
                params[name] = value;
            }
        }
        params['meta.types'] = jsonObj;
        if(params.description != null && params.description != "")
            params['meta.types'].description = "text";
    }
}
delete params['deviceAttrs'];
delete confirmPassword;
log.info("Request normalized params: " + JSON.stringify(params));

var response;
if(update)
    response = devices.save(params);
else
    response = devices.create(params);
if(response.metadata.status == "failure") {
    return response.metadata;
} else {
    return response.result.device;
}
