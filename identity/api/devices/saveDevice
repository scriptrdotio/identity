var _ = require("../../modules/underscore/underscore.js")._;
var paramsEvaluator = require("../../entities/ParamsEvaluator");
var errorHandler = require("../../entities/ErrorHandler");
var errorHandler = new errorHandler.ErrorHandler();
var devices= require("device");
var log = require("log")
log.setLevel("INFO");
var config = require ("../../config/properties");
var aclEvaluator = require("../../entities/AclEvaluator");
//Check permissions
var identityManagementGroups = config.identityManagementGroups;
//Check if user has rights to access this api
var aclEvaluator = new aclEvaluator.AclEvaluator();
//user needs to be in the identityManagementGroups
var hasPermission = aclEvaluator.hasPermissions(request.user, identityManagementGroups);
if(!hasPermission) {
    return errorHandler.buildError("no_permission", "You do not have enough permissions to manage devices.");
}

var requiredParams = ["id", "name"];
var optionalParams = ["update", "description", "groups", "password", "isSuspended", "deviceAttrs", "_oldDeviceAttrs"];

//Check if required params
var paramsEvaluator = new paramsEvaluator.ParamsEvaluator();
hasAllRequiredParams = paramsEvaluator.hasRequiredParams(request.body, requiredParams)
if(!hasAllRequiredParams.success) {
    return errorHandler.buildError("missing_parameter", "Parameter \""+hasAllRequiredParams.param+ "\" is required.");
}

var params = paramsEvaluator.buildParams(request.body, requiredParams, optionalParams);

var update = false;
if(params["update"] !== undefined && params["update"] !== null )
    update = params["update"];
//remove update from params so it does not get saved as a device attribute
delete params['update'];

var oldDeviceAttrs = params._oldDeviceAttrs;
var deviceAttrs = params.deviceAttrs;
//if a user added empty device attributes rows and saved. We would have empty objects in an empty array. The following validation is to avoid looping multiple times on empty objects 
if(deviceAttrs != null && !(deviceAttrs.filter(function(el) {
    return Object.keys(el).length !== 0;
}).length === 0)){
    var jsonObj = {};
    params['meta.types'] = {};
    if(deviceAttrs !=null && deviceAttrs.length > 0){
        for(var i=0; i<deviceAttrs.length; i++){
            if(deviceAttrs[i] != null && Object.keys(deviceAttrs[i]).length > 0){
                var name = deviceAttrs[i].name;
                var value = deviceAttrs[i].value;
                var type = deviceAttrs[i].type;
                jsonObj[name]= type;
                params[name] = value;
            }
        }
        params['meta.types'] = jsonObj;
        if(params.description != null && params.description != "")
            params['meta.types'].description = "text";
    }
}
delete params['deviceAttrs'];
delete params['_oldDeviceAttrs'];
delete confirmPassword;
log.info("Request normalized params: " + JSON.stringify(params));

var ts = apsdb.beginTransaction();
var responseObj = {};
try{
    var response;
    if(update){
        //check if any attribute was removed
        var newDeviceAttrs = _.pluck(deviceAttrs, "name");
        var removedAttrs = _.difference(oldDeviceAttrs, newDeviceAttrs);
        if(removedAttrs && removedAttrs.length > 0){
            removedAttrs.forEach(function(removedAttr) {
                params[removedAttr] = "";
            })
        }
        response = devices.save(params);
    }else{
        //if no password is passed, generate a random one
        if(params["password"] == null || params["password"] == undefined || params["password"] == "")
            params["password"] = Math.random().toString(36).substring(2);

        response = devices.create(params);
    }
    log.info("device save response: "+JSON.stringify(response));
    if(response.metadata.status == "failure") {
        throw response.metadata;
    } else {
        responseObj =  response.metadata;
        //generate token after successfull device creation AND if device is not suspended
        if(!update && params.isSuspended == "false"){
            var tokenResponse = devices.generateToken(response.result.device.id);
            log.info("Generating token response: " + JSON.stringify(tokenResponse));
            if(tokenResponse.metadata.status == "failure") {
                log.error("Generating token failed: " + JSON.stringify(tokenResponse.metadata));
                responseObj = tokenResponse.metadata;
                throw {
                    errorCode: tokenResponse.metadata.errorCode,
                    errorDetail: tokenResponse.metadata.errorDetail
                };
            } else {
                responseObj = {"status": "success"};
            }
        }
    }
    
    ts.commit();
}catch(e){
    log.error("Exception while saving device with error: " + JSON.stringify(e));
    responseObj = errorHandler.buildError(e.errorCode, e.errorDetail);
    ts.rollback();
}
return responseObj;

