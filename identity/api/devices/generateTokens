var _ = require("../../modules/underscore/underscore.js")._;
var paramsEvaluator = require("../../entities/ParamsEvaluator");
var errorHandler = require("../../entities/ErrorHandler");
var devices= require("device");
var log = require("log")
log.setLevel("INFO");
var errorHandler = new errorHandler.ErrorHandler();
var config = require ("../../config/properties");
var aclEvaluator = require("../../entities/AclEvaluator");
var identityManager = require("../../entities/identityManager");
var identityManagementGroups = config.identityManagementGroups;
//Check if user has rights to access this api
var aclEvaluator = new aclEvaluator.AclEvaluator();
//user needs to be in the identityManagementGroups
var hasPermission = aclEvaluator.hasPermissions(request.user, identityManagementGroups);
if(!hasPermission) {
    return errorHandler.buildError("no_permission", "You do not have enough permissions to manage devices.");
}


log.info("rawBody"+ request.rawBody)
log.info("body"+ request.body)
log.info("parameters"+ request.parameters)
var body = request.body ? request.body : ((request.rawBody) ? request.rawBody : request.parameters);
var requestParams = typeof(body) == "string" ? JSON.parse(body) : body;
log.info("Request normalized params: " + JSON.stringify(requestParams));
var generateTokensPath = config.generateTokensPath;

switch (request.method) {
    case "GET":
        // if the request method is GET, it means we are checking on jobHandleId
        return identityManager.getJobStatus(requestParams, paramsEvaluator, errorHandler);
        break;
    case "POST":
        var requiredParams = ["id"];
        var optionalParams = ["action"];

        //Check if required params
        var paramsEvaluator = new paramsEvaluator.ParamsEvaluator();
        hasAllRequiredParams = paramsEvaluator.hasRequiredParams(requestParams, requiredParams)
        if(!hasAllRequiredParams.success) {
            return errorHandler.buildError("missing_parameter", "Parameter \""+hasAllRequiredParams.param+ "\" is required.", null, null, hasAllRequiredParams.param);
        }

        var params = paramsEvaluator.buildParams(requestParams, requiredParams, optionalParams);
        log.info("params12345 "+JSON.stringify(params));

        // if we have action param ( single regenerate / generate ), no need to schedual a job
        if(params.action != null && params.action != ""){
			return identityManager.generateToken(params);
        } else {

            //schedule job
            var data = {
                "apsdb.scriptName": generateTokensPath,
                "params": JSON.stringify(params)
            };
            var result = apsdb.callApi("QueueScript", data, null);
            log.info(JSON.stringify(result));
            if (result.status == "failure") {
                var errorMsg = "[traceContact] An error occurred while queueing job [" + JSON.stringify(result) + "]";
                return { "status": "failure", "errorCode": "error_queueing_job", "errorDetail": errorMsg };
            } else {
                return {"status":"success", "scriptHandleId": result.result.script.scriptHandle};
            }
        }
        break;
    default:
        return errorHandler.buildError("invalid_method", "Invalid HTTP method"); 

}
