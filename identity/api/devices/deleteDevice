var paramsEvaluator = require("../../entities/ParamsEvaluator");
var aclEvaluator = require("../../entities/AclEvaluator");
var errorHandler = require("../../entities/ErrorHandler");
var errorHandler = new errorHandler.ErrorHandler();
var config = require ("identity/config/config");
var devices = require("device");
var log = require("log")
log.setLevel("INFO");

//Check permissions
var identityManagementGroups = config.identityManagementGroups;
//Check if user has rights to access this api
var aclEvaluator = new aclEvaluator.AclEvaluator();
//user needs to be in the identityManagementGroups
var hasPermission = aclEvaluator.hasPermissions(request.user, identityManagementGroups);
if(!hasPermission) {
  return errorHandler.buildError("no_permission", "You do not have enough permissions to manage devices.");
}

var body = request.body ? request.body : ((request.rawBody) ? request.rawBody : request.parameters);
var params = typeof(body) == "string" ? JSON.parse(body) : body;
log.info("Request params: " + JSON.stringify(params));
switch (request.method) {
    case "GET":
        // if the request method is GET, it means we are checking on jobHandleId
        var identityManager = require("identity/entities/identityManager");
        return identityManager.getJobStatus(params, paramsEvaluator, errorHandler);
        break;
    case "POST":
        //Check required params
        var requiredParams = ["id"];
        var paramsEvaluator = new paramsEvaluator.ParamsEvaluator();
        hasAllRequiredParams = paramsEvaluator.hasRequiredParams(params, requiredParams);
        if(!hasAllRequiredParams.success) {
            return errorHandler.buildError("missing_parameter", "Parameter \""+hasAllRequiredParams.param+ "\" is required.");
        }

        var deviceIdParam = params["id"];
        var deviceArr = [];
        if(deviceIdParam instanceof Array){
            deviceArr = deviceIdParam;
        }else{
            deviceArr = [deviceIdParam];
        }

        if(deviceArr.length == 1){
            var response = devices.delete(deviceArr[0]);
            if(response.metadata.status == "failure") {
                return response.metadata;
            } else {
                return {"status": "success"};
            }
        }else{
            //schedule job if the devices are multiple
            var data = {
                "apsdb.scriptName": config.deleteDevicesScriptPath,
                "params": JSON.stringify(deviceArr)
            };
            var result = apsdb.callApi("QueueScript", data, null);

            if (result.status == "failure") {
                var errorMsg = "[deleteDevice] An error occurred while queueing job [" + JSON.stringify(result) + "]";
                return { "status": "failure", "errorDetail": errorMsg };
            } else {
                return {"status":"success", "scriptHandleId": result.result.script.scriptHandle};
            }
        }

        break;
    default:
        return errorHandler.buildError("invalid_method", "Invalid HTTP method"); 
}