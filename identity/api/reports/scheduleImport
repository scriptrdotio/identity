var paramsEvaluator = require("identity/entities/ParamsEvaluator");
var errorHandler = require("identity/entities/ErrorHandler");
var config = require ("identity/config/config");
var errorHandler = new errorHandler.ErrorHandler();
var log = require("log")
log.setLevel("INFO");
var body = request.body ? request.body : ((request.rawBody) ? request.rawBody : request.parameters);
var params = typeof(body) == "string" ? JSON.parse(body) : body;
log.info("Request params: " + JSON.stringify(params));
var importCsvScriptPath = config.importCsvScriptPath;
switch (request.method) {
  case "GET":
        // if the request method is GET, it means we are checking on jobHandleId
        var identityManager = require("identity/entities/identityManager");
        return identityManager.getJobStatus(params, paramsEvaluator, errorHandler);
        break;
  case "POST":
        if(request.files != null && request.files.file != null) {
        	var fileParam = request.files.file;
            var data = {
                "apsdb.scriptName": importCsvScriptPath,
                "params": JSON.stringify(fileParam)
            };
            var result = apsdb.callApi("QueueScript", data, null);

            if (result.status == "failure") {
                var errorMsg = "[scheduleImport] An error occurred while queueing job [" + JSON.stringify(result) + "]";
                return { "status": "failure", "errorDetail": errorMsg };
            } else {
                return {"status":"success", "scriptHandleId": result.result.script.scriptHandle};
            }
        }else{
            return errorHandler.buildError("missing_parameter", "A file is required.");
        }
        
        break;
  default:
       return errorHandler.buildError("invalid_method", "Invalid HTTP method"); 
}