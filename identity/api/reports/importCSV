var log = require("log");
log.setLevel("INFO");
var headingName = "name";
var attrHead = headingName.split(":");
var utils = require("identity/entities/identityManager");
var body = request.body ? request.body : ((request.rawBody) ? request.rawBody : request.parameters);
var params = typeof(body) == "string" ? JSON.parse(body) : body;
params = typeof(params.params) == "string" ? JSON.parse(params.params) : params.params;
log.info("params: " + JSON.stringify(params[0]));

var content = params[0].content;
var lines = content.split(/\r\n|\n/);

var devicesArr = [];
var idPos, namePos, descPos, statusPos;
var attributesArr = [];
var headings = lines[0].split(','); // Splice up the first row to get the headings
for (var h=0; h<headings.length; h++){
    var headingName = headings[h].toLowerCase().trim();
    if(headingName == "id")
        idPos = h;
    else if(headingName == "name")
        namePos = h;
    else if(headingName == "description")
        descPos = h;
    else if(headingName == "status")
        statusPos = h;
	else{
        var attrHead = headingName.split(":");
        if(attrHead.length > 0){
            var attrHeadObj = {};
            attrHeadObj.name = attrHead[0];
            //if the attribute type is not provided, default to string
            //handle following scenarios [name:type, name: , name]
            if(attrHead.length > 1)
            	attrHeadObj.type = attrHead[1].trim() != "" ? attrHead[1].toLowerCase().trim() : "string";
            else
                attrHeadObj.type = "string";
            attrHeadObj.attrPos = h;
            attributesArr.push(attrHeadObj);
        }
    }
}
if(idPos == null || namePos == null)
    return {"status": "failure", "errorDetail": "ID and Name columns are required"};
log.info("headings: " + headings.length);
for (var i=1; i<lines.length; i++) {
    var values = lines[i].split(','); // Split up the comma seperated values
    var device = {};
    device.id = values[idPos];
    device.name = values[namePos];
    if(descPos != null)
        device.description = values[descPos];
    if(statusPos != null){
        var status = values[statusPos] != null ? values[statusPos].toLowerCase() : "";
        device.isSuspended = (status == "active" ? "false" : (status == "suspended" ? "true" : ""));
    }
    if(attributesArr.length > 0){
        var deviceAttrs = [];
        for(j=0; j<attributesArr.length; j++){
            var attrPos = attributesArr[j].attrPos;
            if(values[attrPos] != null && values[attrPos] != ""){
                var attrObj = {};
                attrObj.name = attributesArr[j].name;
                attrObj.value = values[attrPos];
                attrObj.type = attributesArr[j].type;
                deviceAttrs.push(attrObj);
            }
        }
        if(deviceAttrs.length > 0)
            device.deviceAttrs = deviceAttrs;
    }

    devicesArr.push(device);
}

log.info("devicesArr: " + JSON.stringify(devicesArr));

var importResult = utils.importDevices(devicesArr);
log.info("importResult: " + JSON.stringify(importResult));
return importResult.status;


