var paramsEvaluator = require("identity/entities/ParamsEvaluator");
var errorHandler = require("identity/entities/ErrorHandler");
var config = require ("identity/config/config");
var errorHandler = new errorHandler.ErrorHandler();
var log = require("log")
log.setLevel("INFO");
var body = request.body ? request.body : ((request.rawBody) ? request.rawBody : request.parameters);
var params = typeof(body) == "string" ? JSON.parse(body) : body;
log.info("Request params: " + JSON.stringify(params));
var buildCsvScriptPath = config.buildCsvScriptPath;
switch (request.method) {
  case "GET":
        // if the request method is GET, it means we are checking on jobHandleId
        var identityManager = require("identity/entities/identityManager");
        return identityManager.getJobStatus(params, paramsEvaluator, errorHandler);
        break;
  case "POST":
        var requiredParams = ["gridType"];
        var optionalParams = ["queryFilter"];
        var paramsEvaluator = new paramsEvaluator.ParamsEvaluator();
        hasAllRequiredParams = paramsEvaluator.hasRequiredParams(params, requiredParams)
        if(!hasAllRequiredParams.success) {
          return errorHandler.buildError("missing_parameter", "Parameter \""+hasAllRequiredParams.param+ "\" is required.");
        }
        params = paramsEvaluator.buildParams(request.body, requiredParams, optionalParams);
        var data = {
            "apsdb.scriptName": buildCsvScriptPath,
            "params": JSON.stringify(params)
        };
        var result = apsdb.callApi("QueueScript", data, null);

        if (result.status == "failure") {
            var errorMsg = "[scheduleExport] An error occurred while queueing job [" + JSON.stringify(result) + "]";
            return { "status": "failure", "errorDetail": errorMsg };
        } else {
            return {"status":"success", "scriptHandleId": result.result.script.scriptHandle};
        }
        break;
  default:
       return errorHandler.buildError("invalid_method", "Invalid HTTP method"); 
}